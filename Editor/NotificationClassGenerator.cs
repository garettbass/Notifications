using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;
using Debug = UnityEngine.Debug;
using Object = UnityEngine.Object;

public static class NotificationClassGenerator
{

    public const int MenuPriority = 0;

    [InitializeOnLoadMethod]
    private static void InitializeOnLoad()
    {
        GenerateNotificationClasses(
            logThresholdMs: 64,
            skipCoreNotificationClasses: true);
    }

    [MenuItem(
        "Assets/Create/Notification/Generate Notification Classes",
        priority = MenuPriority + 128)]
    private static void GenerateNotificationClassesMenuItem()
    {
        GenerateNotificationClasses(
            logThresholdMs: 0,
            skipCoreNotificationClasses: false);
    }

    private static void GenerateNotificationClasses(
        double logThresholdMs = 0,
        bool skipCoreNotificationClasses = false)
    {
        var start = DateTime.Now;
        GenerateCoreNotificationClasses();
        GenerateNotificationMessageAttributedClasses();
        var elapsedMs = (DateTime.Now - start).TotalMilliseconds;
        if (elapsedMs > logThresholdMs)
            Debug.Log($"GenerateNotificationClasses() took {elapsedMs} ms.");
    }

    private static void GenerateCoreNotificationClasses()
    {
        var filePath =
            new StackTrace(fNeedFileInfo: true)
            .GetFrame(0)
            .GetFileName();
        var editorDirectory =
            Path.GetDirectoryName(filePath);
        var notificationsDirectory =
            Path.GetDirectoryName(editorDirectory);
        var generatedDirectory =
            Path.Combine(notificationsDirectory, "Generated");
        GenerateNotificationClasses<int>(generatedDirectory, "Integer");
        GenerateNotificationClasses<float>(generatedDirectory, "Float");
        GenerateNotificationClasses<string>(generatedDirectory);
        GenerateNotificationClasses<Color>(generatedDirectory);
        GenerateNotificationClasses<Object>(generatedDirectory);
        GenerateNotificationClasses<GameObject>(generatedDirectory);
        GenerateNotificationClasses<Transform>(generatedDirectory);
        GenerateNotificationClasses<RaycastHit>(generatedDirectory);
        GenerateNotificationClasses<Vector2>(generatedDirectory);
        GenerateNotificationClasses<Vector3>(generatedDirectory);
        GenerateNotificationClasses<Vector4>(generatedDirectory);
    }

    public static void GenerateNotificationMessageAttributedClasses()
    {
        var notificationMessageAttributes =
            NotificationMessageAttribute.FindAll();

        foreach (var attribute in notificationMessageAttributes)
            GenerateNotificationClasses(
                attribute.notificationClassDirectory,
                attribute.notificationMessageType);
    }

    public static void GenerateNotificationClasses<T>(
        string directory,
        string messageName = null)
    {
        GenerateNotificationClasses(directory, typeof(T), messageName);
    }

    public static void GenerateNotificationClasses(
        string directory,
        Type messageType,
        string messageName = null)
    {
        var dataPath = Application.dataPath;
        if (directory.StartsWith(dataPath) == false)
            directory = Path.Combine(dataPath, directory);
        if (Directory.Exists(directory) == false)
            Directory.CreateDirectory(directory);

        if (messageName == null)
            messageName = messageType.Name;

        GenerateNotification(directory, messageType, messageName);
        GenerateNotificationEvent(directory, messageType, messageName);
        GenerateNotificationReceiver(directory, messageType, messageName);
    }

    private static void GenerateNotification(
        string directory,
        Type messageType,
        string messageName)
    {
        var fullName = messageType.FullName;
        var fileName = $"{messageName}Notification.cs";
        var filePath = Path.Combine(directory, fileName);
        if (File.Exists(filePath))
            return;

        var order = MenuPriority + (int)messageName[0];
        var source =
            $"// Generated by NotificationClassGenerator\n" +
            $"[UnityEngine.CreateAssetMenu(\n" +
            $"    menuName =\"Notification/{messageName} Notification\",\n"+
            $"    order = {order})]\n" +
            $"public class {messageName}Notification :\n" +
            $"    Notification<{fullName}>\n" +
            $"{{ }}";

        File.WriteAllText(filePath, source);
        ImportOnNextEditorUpdate(filePath);
    }

    private static void GenerateNotificationEvent(
        string directory,
        Type messageType,
        string messageName)
    {
        var fullName = messageType.FullName;
        var fileName = $"{messageName}NotificationEvent.cs";
        var filePath = Path.Combine(directory, fileName);
        if (File.Exists(filePath))
            return;

        var source =
            $"// Generated by NotificationClassGenerator\n" +
            $"[System.Serializable]\n" +
            $"public class {messageName}NotificationEvent :\n" +
            $"    NotificationEvent<{fullName}>\n" +
            $"{{ }}";

        File.WriteAllText(filePath, source);
        ImportOnNextEditorUpdate(filePath);
    }

    private static void GenerateNotificationReceiver(
        string directory,
        Type messageType,
        string messageName)
    {
        var fullName = messageType.FullName;
        var fileName = $"{messageName}NotificationReceiver.cs";
        var filePath = Path.Combine(directory, fileName);
        if (File.Exists(filePath))
            return;

        var source =
            $"// Generated by NotificationClassGenerator\n" +
            $"public class {messageName}NotificationReceiver :\n" +
            $"    NotificationReceiver<\n" +
            $"        {fullName},\n" +
            $"        {messageName}Notification,\n" +
            $"        {messageName}NotificationEvent>\n" +
            $"{{ }}";

        File.WriteAllText(filePath, source);
        ImportOnNextEditorUpdate(filePath);
    }

    private static void ImportOnNextEditorUpdate(string filePath)
    {
        EditorApplication.delayCall += () =>
            AssetDatabase.ImportAsset(filePath);
    }

}